use crate::messages::parsing::read_u16;

enum RRType {
    Zero,
    A,
    NS,
    MD,
    MF,
    CNAME,
    SOA,
    MB,
    MG,
    MR,
    NULL,
    WKS,
    PTR,
    HINFO,
    MINFO,
    MX,
    TXT,
    RP,
    AFSDB,
    X25,
    ISDN,
    RT,
    NSAP,
    NsapPtr,
    SIG,
    KEY,
    PX,
    GPOS,
    AAAA,
    LOC,
    NXT,
    EID,
    NIMLOC,
    SRV,
    ATMA,
    NAPTR,
    KX,
    CERT,
    A6,
    DNAME,
    SINK,
    OPT,
    APL,
    DS,
    SSHFP,
    IPSECKEY,
    RRSIG,
    NSEC,
    DNSKEY,
    DHCID,
    NSEC3,
    NSEC3PARAM,
    TLSA,
    SMIMEA,
    HIP,
    NINFO,
    RKEY,
    TALINK,
    CDS,
    CDNSKEY,
    OPENPGPKEY,
    CSYNC,
    ZONEMD,
    SVCB,
    HTTPS,
    SPF,
    UINFO,
    UID,
    GID,
    UNSPEC,
    NID,
    L32,
    L64,
    LP,
    EUI48,
    EUI64,
    TKEY,
    TSIG,
    IXFR,
    AXFR,
    MAILB,
    MAILA,
    All,
    URI,
    CAA,
    AVC,
    DOA,
    AMTRELAY,
    TA,
    DLV,
    PrivateUse,
    Reserved,
    ReservedFuture,
    ReservedPrivate,
    ReservedStandardsAction,
    Unassigned,
}

impl RRType {
    pub fn parse(buf: &mut &[u8]) -> Option<RRType> {
        let val = read_u16(buf)?;
        Some(match val {
            0 => RRType::Reserved,
            1 => RRType::A,
            2 => RRType::NS,
            3 => RRType::MD,
            4 => RRType::MF,
            5 => RRType::CNAME,
            6 => RRType::SOA,
            7 => RRType::MB,
            8 => RRType::MG,
            9 => RRType::MR,
            10 => RRType::NULL,
            11 => RRType::WKS,
            12 => RRType::PTR,
            13 => RRType::HINFO,
            14 => RRType::MINFO,
            15 => RRType::MX,
            16 => RRType::TXT,
            17 => RRType::RP,
            18 => RRType::AFSDB,
            19 => RRType::X25,
            20 => RRType::ISDN,
            21 => RRType::RT,
            22 => RRType::NSAP,
            23 => RRType::NsapPtr,
            24 => RRType::SIG,
            25 => RRType::KEY,
            26 => RRType::PX,
            27 => RRType::GPOS,
            28 => RRType::AAAA,
            29 => RRType::LOC,
            30 => RRType::NXT,
            31 => RRType::EID,
            32 => RRType::NIMLOC,
            33 => RRType::SRV,
            34 => RRType::ATMA,
            35 => RRType::NAPTR,
            36 => RRType::KX,
            37 => RRType::CERT,
            38 => RRType::A6,
            39 => RRType::DNAME,
            40 => RRType::SINK,
            41 => RRType::OPT,
            42 => RRType::APL,
            43 => RRType::DS,
            44 => RRType::SSHFP,
            45 => RRType::IPSECKEY,
            46 => RRType::RRSIG,
            47 => RRType::NSEC,
            48 => RRType::DNSKEY,
            49 => RRType::DHCID,
            50 => RRType::NSEC3,
            51 => RRType::NSEC3PARAM,
            52 => RRType::TLSA,
            53 => RRType::SMIMEA,
            54 => RRType::Unassigned,
            55 => RRType::HIP,
            56 => RRType::NINFO,
            57 => RRType::RKEY,
            58 => RRType::TALINK,
            59 => RRType::CDS,
            60 => RRType::CDNSKEY,
            61 => RRType::OPENPGPKEY,
            62 => RRType::CSYNC,
            63 => RRType::ZONEMD,
            64 => RRType::SVCB,
            65 => RRType::HTTPS,
            _ => {} // TODO: Finish from (https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4)
        })
    }
}
